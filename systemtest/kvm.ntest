# -*-Perl-*-

###############################
# kvm.ntest -
#
# System tests for EC-KVM plugin
#
# Copyright (c) 2005-2011 Electric Cloud, Inc.
# All rights reserved
###############################

use strict;
use warnings;
use ECTest;


initCommander();
# Run system tests
$::gRunTest = 1;

$::gPlugin_name   = $::ENV{PLUGIN_NAME};
$::gPlugin_key    = $::gPlugin_name;
$::gPlugin_key    =~ s/-[^-]+$//;
$::gPlugin_driver = $::gPlugin_key;
$::gPlugin_driver =~ s/-/::/g;

# win/lin matches the chronic3 procedure platform property
$::gPlatform       = "lin";
if ($^O eq "MSWin32") {
    $::gPlatform = "win";
} 

# if (defined($::ENV{$::gRunFlag}) && $::ENV{$::gRunFlag} eq "0" ) {
    # print "Skipping system tests\n";
    # exit 0;
# }



# from initCommander
$::N = $adminSession;
my $xpath = $::N->getPlugin($::gPlugin_key);
$::gPlugin_name = $xpath->findvalue('//pluginName')->value;
$::gPlugin_ver = $xpath->findvalue('//pluginVersion')->value;
$::gCreatePrivateDirs = 1;

# triggers fake data
$::gRunTest = 1;



# $::KVM = $::N->getProperty("/plugins/EC-KVM/projectName")->findvalue("//value")->string_value;
# $::gJobId = $::ENV{COMMANDER_JOBID} || "1";
# $::gAgentResource = "local";














################################
# check-components-present - Check that the plugin contains required components
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "check-components-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath;
    $xpath = $::N->getSteps("$::gPlugin_name","Create");
    assertOK($xpath,"Create");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Create");
    assertOK($xpath,"Create");
    assertEq("Create", $xpath->findvalue("//step[2]/stepName"), "step 2 is Create");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Start");
    assertOK($xpath,"Start");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Start");
    assertOK($xpath,"Start");
    assertEq("Start", $xpath->findvalue("//step[2]/stepName"), "step 2 is Start");
    
    $xpath = $::N->getSteps("$::gPlugin_name","ShutDown");
    assertOK($xpath,"ShutDown");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","ShutDown");
    assertOK($xpath,"ShutDown");
    assertEq("ShutDown", $xpath->findvalue("//step[2]/stepName"), "step 2 is ShutDown");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Suspend");
    assertOK($xpath,"Suspend");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Suspend");
    assertOK($xpath,"Suspend");
    assertEq("Suspend", $xpath->findvalue("//step[2]/stepName"), "step 2 is Suspend");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Resume");
    assertOK($xpath,"Resume");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Resume");
    assertOK($xpath,"Resume");
    assertEq("Resume", $xpath->findvalue("//step[2]/stepName"), "step 2 is Resume");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Destroy");
    assertOK($xpath,"Destroy");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Destroy");
    assertOK($xpath,"Destroy");
    assertEq("Destroy", $xpath->findvalue("//step[2]/stepName"), "step 2 is Destroy");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Clone");
    assertOK($xpath,"Clone");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Clone");
    assertOK($xpath,"Clone");
    assertEq("Clone", $xpath->findvalue("//step[2]/stepName"), "step 2 is Clone");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Snapshot");
    assertOK($xpath,"Snapshot");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Snapshot");
    assertOK($xpath,"Snapshot");
    assertEq("Snapshot", $xpath->findvalue("//step[2]/stepName"), "step 2 is Snapshot");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Revert");
    assertOK($xpath,"Revert");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Revert");
    assertOK($xpath,"Revert");
    assertEq("Revert", $xpath->findvalue("//step[2]/stepName"), "step 2 is Revert");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Undefine");
    assertOK($xpath,"Undefine");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Undefine");
    assertOK($xpath,"Undefine");
    assertEq("Undefine", $xpath->findvalue("//step[2]/stepName"), "step 2 is Undefine");
    
    $xpath = $::N->getSteps("$::gPlugin_name","List");
    assertOK($xpath,"List");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","List");
    assertOK($xpath,"List");
    assertEq("List", $xpath->findvalue("//step[2]/stepName"), "step 2 is List");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CleanUp");
    assertOK($xpath,"CleanUp");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CleanUp");
    assertOK($xpath,"CleanUp");
    assertEq("CleanUp", $xpath->findvalue("//step[2]/stepName"), "step 2 is CleanUp");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CreateResourceFromVM");
    assertOK($xpath,"CreateResourceFromVM");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CreateResourceFromVM");
    assertOK($xpath,"CreateResourceFromVM");
    assertEq("CreateResourceFromVM", $xpath->findvalue("//step[2]/stepName"), "step 2 is CreateResourceFromVM");
    
};

################################
# Eval KVM Driver - Test loading KVM driver
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "Eval KVM Driver", {}, sub {
    use ElectricCommander::PropMod;

    # Load perl code from running Commander
    ElectricCommander::PropMod::loadPerlCodeFromProperty($::N,"/projects/$::gPlugin_name/kvm_driver/KVM");
    my $gd = new KVM();
};

################################
# create-vm - Create virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################

ntest "create-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_vmname} = "Test_VM";
    $opts->{kvm_storage_method} = 0;
    $opts->{kvm_pool_name} = "pool";
    $opts->{kvm_device_type} = "disk";
    $opts->{kvm_disk_format} = "qcow2";
    $opts->{kvm_install_method} = 0;
    $opts->{kvm_install_source_path} = "/dev/cdrom";
    $opts->{kvm_network_type} = 1;
    $opts->{kvm_network} = "default";
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vnclisten_ip} = "192.168.2.25";
    $opts->{kvm_num_cpus} = 1;
    $opts->{kvm_memory}  = 512;
    $opts->{kvm_cpu_arch} = "i386";
    $opts->{kvm_disksize} = 4;
    $opts->{kvm_guest_type} = "linux";
    
  
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->create();

    
    my $expectedOutput = "";
    $expectedOutput .= "virt-install -d --connect qemu:///system --name Test_VM --ram 512 --hvm --arch i386 --vcpus 1  --disk pool=pool,device=disk,size=4,format=qcow2 --cdrom /dev/cdrom --os-type linux --graphics vnc,listen=192.168.2.25,keymap=no --network network:default --noautoconsole";
    $expectedOutput .= "\n";
    $expectedOutput .= "Creating virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully created.";
    
    assertEq($expectedOutput, $out, "output");
};

################################
# start-vm - Start a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "start-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->start();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system start Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "Starting virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully started.";
    assertEq($expectedOutput, $out, "output");
};

################################
# shutdown-vm - Shutdown a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "shutdown-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->shutdown();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system shutdown Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Shutting Down virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' shutdown successfully.";
    assertEq($expectedOutput, $out, "output");
};

################################
# suspend-vm - Suspend a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "suspend-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->suspend();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system suspend Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Suspending virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully suspended.";
    assertEq($expectedOutput, $out, "output");
};

################################
# resume-vm - Resume a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "resume-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->resume();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system resume Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Resuming virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully resumed.";
    assertEq($expectedOutput, $out, "output");
};

################################
# destroy-vm - Destroy a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "destroy-vm", {}, sub {
    my $opts;
    
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->destroy();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system destroy Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Destroying virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully destroyed.";
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # clone-vm - Clone virtual machine
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "clone-vm", {}, sub {
    my $opts; 
    $opts->{kvm_number_of_clones} = 1;
    $opts->{kvm_original_vmname} = "Test_VM";
    $opts->{kvm_vmname} = "Test_VM_Clone";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->clone();
    
    my $expectedOutput = "";
    $expectedOutput .= "virt-clone -d 5 --connect qemu:///system --original Test_VM --name Test_VM_Clone --auto-clone";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Cloning virtual machine 'Test_VM' to 'Test_VM_Clone'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM_Clone' successfully cloned.";
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # snapshot-vm - Create snapshot on a virtual machine
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "snapshot-vm", {}, sub {
    my $opts; 
    $opts->{kvm_snapshot_desc} = "Test Snapshot Description";
    $opts->{kvm_snapshot_name} = "Test_Snapshot";
    $opts->{kvm_vmname} = "Test_VM";
 
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->snapshot();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system snapshot-create  Test_VM Test_Snapshot.xml";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Creating snapshot 'Test_Snapshot' for virtual machine  'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Snapshot 'Test_Snapshot' on 'Test_VM' successfully created.";
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # revert-vm - Revert snapshot on a virtual machine
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "revert-vm", {}, sub {
    my $opts; 
    $opts->{kvm_snapshot_name} = "Test_Snapshot";
    $opts->{kvm_vmname} = "Test_VM";
 
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);   
    my $out = $gt->revert();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system snapshot-revert Test_VM Test_Snapshot";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Reverting virtual machine 'Test_VM' to snapshot 'Test_Snapshot'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully reverted to snapshot 'Test_Snapshot'."; 
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # undefine-vm - Undefine  a virtual machine
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "undefine-vm", {}, sub {
    my $opts; 
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
 
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);  
    my $out = $gt->undefine();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system undefine Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "Deleting virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully deleted.";
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # list-vm - List virtual machines
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "list-vm", {}, sub {
    my $opts; 
    $opts->{kvm_state_list} = "--all";
 
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);  
    my $out = $gt->list();
    
    my $expectedOutput = "";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system list --all";
    $expectedOutput .= "\n";
    $expectedOutput .= "Listing virtual machines..."; 
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # createResourcesFromVM-vm - Create Resources from virtual machines
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "createResourcesFromVM-vm", {}, sub {
    my $opts; 
    $opts->{kvm_number_of_vms} = 1;
    $opts->{kvm_vmname} = "Test_VM";
    
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);  
    my $out = $gt->createResourcesFromVM();
    
    my $expectedOutput = "";
    $expectedOutput .= "Getting information of virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Storing properties...";
    $expectedOutput .= "\n";
    $expectedOutput .= "IP address: 192.168.2.25";
    $expectedOutput .= "\n";
    $expectedOutput .= "Hostname: debug2";
    $expectedOutput .= "\n";
    $expectedOutput .= "Creating resource for virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Resource created";
    $expectedOutput .= "\n";
    $expectedOutput .= "Waiting for ping response #(300) of resource Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "Ping response succesfully received";
    assertEq($expectedOutput, $out, "output");
};

# ################################
# # cleanup-vm - Cleanup virtual machines and resources
# #
# # Arguments:
# #   none
# #
# # Returns:
# #   none
# #
# ################################
ntest "cleanup-vm", {}, sub {
    my $opts; 
    $opts->{kvm_vmname} = "Test_VM";
    $opts->{kvm_delete_vm} = 1;
    $opts->{kvm_number_of_vms} = 1;
 
    # Create ElectricCommander instance
    my $ec = new ElectricCommander();   
    # Make an instance of the object, passing in options as a hash
    my $gt = new KVM($ec, $opts);  
    my $out = $gt->cleanup();
    
    my $expectedOutput = "";
    $expectedOutput .= "Deleting resource 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Resource deleted'";
    $expectedOutput .= "\n";
    $expectedOutput .= "virsh -d 5 --connect qemu:///system destroy Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "'Destroying virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully destroyed.";
    $expectedOutput .= "\n";        
    $expectedOutput .= "virsh -d 5 --connect qemu:///system undefine Test_VM";
    $expectedOutput .= "\n";
    $expectedOutput .= "Deleting virtual machine 'Test_VM'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'Test_VM' successfully deleted.";
    assertEq($expectedOutput, $out, "output");
};

1;
